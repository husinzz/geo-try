{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Navigation","className","href","PlaceCard","props","style","maxHeight","height","width","src","image","alt","name","rating","App","map","useState","coords","longitude","latitude","position","setPostion","API","setAPI","res","setRes","callback","results","status","window","google","maps","places","PlacesServiceStatus","OK","console","log","useEffect","navigator","geolocation","getCurrentPosition","onSubmit","e","preventDefault","query","LatLng","Map","document","getElementById","center","zoom","request","location","radius","PlacesService","textSearch","initialize","type","onChange","event","target","value","id","current","place_id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"yKAsFA,SAASA,IACR,OACC,sBAAKC,UAAU,gDAAf,UACC,oBAAIA,UAAU,0BAAd,qBACA,mBACCA,UAAU,0BACVC,KAAK,+BAFN,yBAUH,SAASC,EAAUC,GAClB,OACC,sBACCH,UAAU,0CACVI,MAAO,CAAEC,UAAW,QAASC,OAAQ,QAASC,MAAO,SAFtD,UAIC,qBAAKC,IAAKL,EAAMM,MAAOT,UAAU,SAASU,IAAI,mBAC9C,sBAAKV,UAAU,gBAAf,UACC,oBAAIA,UAAU,WAAd,SAA0BG,EAAMQ,OAChC,mBAAGX,UAAU,GAAb,SAAiBG,EAAMS,eAMZC,MAjHf,WACC,IAgBIC,EAhBJ,EAA+BC,mBAAS,CACvCC,OAAQ,CACPC,UAAW,GACXC,SAAU,MAHZ,mBAAOC,EAAP,KAAiBC,EAAjB,KAMA,EAAsBL,mBAAS,IAA/B,mBAAOM,EAAP,KAAYC,EAAZ,KACA,EAAsBP,mBAAS,IAA/B,mBAAOQ,EAAP,KAAYC,EAAZ,KAiCA,SAASC,EAASC,EAASC,GACtBA,IAAWC,OAAOC,OAAOC,KAAKC,OAAOC,oBAAoBC,IAC5DC,QAAQC,IAAIT,GACZF,EAAOE,IAEPQ,QAAQC,IAAI,YAId,OAvCAC,qBAAU,WACTC,UAAUC,YAAYC,oBAAmB,SAACpB,GACzCC,EAAWD,QAEV,IAoCF,sBAAKnB,UAAU,GAAf,UACC,cAACD,EAAD,IACA,sBAAKC,UAAU,QAAf,UACC,oBAAIA,UAAU,cAAd,yDAGA,sBAAMwC,SAAU,SAACC,GAChBA,EAAEC,iBAtCN,SAAoBC,GACnB,IAAI3B,EAAS,IAAIY,OAAOC,OAAOC,KAAKc,OACnCzB,EAASH,OAAOE,SAChBC,EAASH,OAAOC,WAGjBH,EAAM,IAAIc,OAAOC,OAAOC,KAAKe,IAAIC,SAASC,eAAe,OAAQ,CAChEC,OAAQhC,EACRiC,KAAM,KAGP,IAAIC,EAAU,CACbC,SAAUnC,EACVoC,OAAQ,MACRT,MAAOA,GAGE,IAAIf,OAAOC,OAAOC,KAAKC,OAAOsB,cAAcvC,GAC9CwC,WAAWJ,EAASzB,GAsBzB8B,CAAWlC,IACTrB,UAAU,OAJb,SAKC,uBAAOA,UAAU,gCAAgCwD,KAAK,OAAO7C,KAAK,MAAM8C,SAAU,SAACC,GAAD,OAAWpC,EAAOoC,EAAMC,OAAOC,YAElH,oBAAG5D,UAAU,eAAb,mDAEiBmB,EAASH,OAAOE,SAFjC,0BAE2DC,EAASH,OAAOC,iBAG5E,qBAAK4C,GAAG,QACR,qBAAK7D,UAAU,2DAAf,SACEuB,EAAIT,KAAI,SAACgD,GAAD,OACR,cAAC5D,EAAD,CACCO,MAAM,mCACNE,KAAMmD,EAAQnD,KACdC,OAAQkD,EAAQlD,QACXkD,EAAQC,mBClEJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7B,SAASC,eAAe,SAM1BiB,K","file":"static/js/main.c4da2a2d.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nfunction App() {\n\tconst [position, setPostion] = useState({\n\t\tcoords: {\n\t\t\tlongitude: \"\",\n\t\t\tlatitude: \"\",\n\t\t},\n\t});\n\tconst [API, setAPI] = useState(\"\");\n\tconst [res, setRes] = useState([])\n\n\n\tuseEffect(() => {\n\t\tnavigator.geolocation.getCurrentPosition((position) => {\n\t\t\tsetPostion(position);\n\t\t});\n\t}, []);\n\n\tvar map;\n\tvar service;\n\n\tfunction initialize(query) {\n\t\tvar coords = new window.google.maps.LatLng(\n\t\t\tposition.coords.latitude,\n\t\t\tposition.coords.longitude\n\t\t);\n\n\t\tmap = new window.google.maps.Map(document.getElementById(\"map\"), {\n\t\t\tcenter: coords,\n\t\t\tzoom: 15,\n\t\t});\n\n\t\tvar request = {\n\t\t\tlocation: coords,\n\t\t\tradius: \"500\",\n\t\t\tquery: query,\n\t\t};\n\n\t\tservice = new window.google.maps.places.PlacesService(map);\n\t\tservice.textSearch(request, callback);\n\t}\n\n\tfunction callback(results, status) {\n\t\tif (status === window.google.maps.places.PlacesServiceStatus.OK) {\n\t\t\tconsole.log(results);\n\t\t\tsetRes(results)\n\t\t} else {\n\t\t\tconsole.log(\"not cool\");\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"\">\n\t\t\t<Navigation />\n\t\t\t<div className=\" my-3\">\n\t\t\t\t<h1 className=\"text-center\">\n\t\t\t\t\tGoogle Place API + GeoLocation Web API demo\n\t\t\t\t</h1>\n\t\t\t\t<form onSubmit={(e) => {\n\t\t\t\t\te.preventDefault()\n\n\t\t\t\t\tinitialize(API)\n\t\t\t\t}} className=\"flex\">\n\t\t\t\t\t<input className=\"border-2 border-black mx-auto\" type=\"text\" name=\"api\" onChange={(event) => setAPI(event.target.value)} />\n\t\t\t\t</form>\n\t\t\t\t<p className=\" text-center\">\n\t\t\t\t\tCurrent Location\n\t\t\t\t\t{` latitude : ${position.coords.latitude}, longtitude : ${position.coords.longitude}`}\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div id=\"map\"></div>\n\t\t\t<div className=\"grid md:grid-cols-3 sm:grid-cols-1 container mx-auto p-3\">\n\t\t\t\t{res.map((current) => (\n\t\t\t\t\t<PlaceCard\n\t\t\t\t\t\timage=\"https://placeholder.pics/svg/200\"\n\t\t\t\t\t\tname={current.name}\n\t\t\t\t\t\trating={current.rating}\n\t\t\t\t\t\tkey={current.place_id}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nfunction Navigation() {\n\treturn (\n\t\t<nav className=\"flex justify-between items-center bg-gray-800\">\n\t\t\t<h1 className=\"text-4xl text-white p-3\">Geo-Try</h1>\n\t\t\t<a\n\t\t\t\tclassName=\"text-2xl text-white p-3\"\n\t\t\t\thref=\"https://urdreamboi.github.io\"\n\t\t\t>\n\t\t\t\tbackhome\n\t\t\t</a>\n\t\t</nav>\n\t);\n}\n\nfunction PlaceCard(props) {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"flex bg-white border-2 border-black m-3\"\n\t\t\tstyle={{ maxHeight: \"150px\", height: \"200px\", width: \"400px\" }}\n\t\t>\n\t\t\t<img src={props.image} className=\"h-full\" alt=\"restraunt_icon\" />\n\t\t\t<div className=\"flex-row px-2\">\n\t\t\t\t<h1 className=\"text-2xl\">{props.name}</h1>\n\t\t\t\t<p className=\"\">{props.rating}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}